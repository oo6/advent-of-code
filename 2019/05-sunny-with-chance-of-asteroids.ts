const input =
  "3,225,1,225,6,6,1100,1,238,225,104,0,1001,152,55,224,1001,224,-68,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,62,41,225,1101,83,71,225,102,59,147,224,101,-944,224,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,2,40,139,224,1001,224,-3905,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,6,94,224,101,-100,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,75,30,225,1102,70,44,224,101,-3080,224,224,4,224,1002,223,8,223,1001,224,4,224,1,223,224,223,1101,55,20,225,1102,55,16,225,1102,13,94,225,1102,16,55,225,1102,13,13,225,1,109,143,224,101,-88,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1002,136,57,224,101,-1140,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,101,76,35,224,1001,224,-138,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,344,101,1,223,223,1107,226,226,224,1002,223,2,223,1006,224,359,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,374,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,389,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,404,1001,223,1,223,1007,677,677,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,677,224,102,2,223,223,1005,224,434,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,7,677,677,224,102,2,223,223,1006,224,464,1001,223,1,223,8,226,226,224,1002,223,2,223,1005,224,479,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,494,1001,223,1,223,7,677,226,224,1002,223,2,223,1005,224,509,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,524,101,1,223,223,1007,677,226,224,102,2,223,223,1006,224,539,101,1,223,223,107,226,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,569,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,584,101,1,223,223,1107,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,614,101,1,223,223,108,677,226,224,102,2,223,223,1005,224,629,101,1,223,223,107,226,677,224,102,2,223,223,1006,224,644,1001,223,1,223,1108,226,226,224,1002,223,2,223,1006,224,659,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226";

enum OP {
  ADD = 1,
  MULT,
  INPUT,
  OUTPUT,
  IF,
  UNLESS,
  LESS_THAN,
  EQUAL,
  HALT = 99,
}

const get = (list: number[], mode: number, value: number) => {
  value = list[value];
  return mode == 0 ? list[value] : value;
};

const execute = (list: number[], input: number): number => {
  list = [...list];
  let pos = 0;

  for (; pos < list.length;) {
    const code = list[pos] % 100;
    const mode = Math.floor(list[pos] / 100);
    const first = get(list, mode % 10, pos + 1);
    const second = get(list, Math.floor(mode / 10), pos + 2);

    switch (code) {
      case OP.ADD:
        list[list[pos + 3]] = first + second;
        pos += 4;
        break;
      case OP.MULT:
        list[list[pos + 3]] = first * second;
        pos += 4;
        break;
      case OP.INPUT:
        list[list[pos + 1]] = input;
        pos += 2;
        break;
      case OP.OUTPUT:
        input = first;
        pos += 2;
        break;
      case OP.IF:
        pos = first ? second : pos + 3;
        break;
      case OP.UNLESS:
        pos = first ? pos + 3 : second;
        break;
      case OP.LESS_THAN:
        list[list[pos + 3]] = first < second ? 1 : 0;
        pos += 4;
        break;
      case OP.EQUAL:
        list[list[pos + 3]] = first == second ? 1 : 0;
        pos += 4;
        break;
      case OP.HALT:
        return input;
    }
  }

  throw "error";
};

const list = input.split(",").map((i) => ~~i);

const partOne = (): number => {
  return execute(list, 1);
};

const partTwo = (): number => {
  return execute(list, 5);
};

console.log(partOne());
console.log(partTwo());

export {};
